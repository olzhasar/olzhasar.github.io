<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Projects on Olzhas Arystanov</title><link>https://olzhasar.com/projects/</link><description>Recent content in Projects on Olzhas Arystanov</description><generator>Hugo -- 0.135.0</generator><language>en-us</language><lastBuildDate>Tue, 22 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://olzhasar.com/projects/index.xml" rel="self" type="application/rss+xml"/><item><title>pyws-chess</title><link>https://olzhasar.com/projects/pyws-chess/</link><pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate><guid>https://olzhasar.com/projects/pyws-chess/</guid><description>&lt;p>I have built a real-time online chess game as a fun weekend hacking project. The game was built in Python with a bit of JavaScript on the front-end.&lt;/p>
&lt;p>Check out the live demo here:
&lt;a href="https://chess.olzhasar.com/">https://chess.olzhasar.com/&lt;/a>&lt;/p>
&lt;p>The game has a simple matching mechanism - the players are being put in a queue and matched based on the FIFO principle.&lt;/p>
&lt;p>The server was built using the &lt;code>FastAPI&lt;/code> framework. The real-time communication is powered by &lt;code>websockets&lt;/code> and the code utilizes &lt;code>asyncio&lt;/code> for concurrency.&lt;/p></description></item><item><title>GoChat</title><link>https://olzhasar.com/projects/gochat/</link><pubDate>Tue, 12 Mar 2024 00:00:00 +0000</pubDate><guid>https://olzhasar.com/projects/gochat/</guid><description>&lt;p>I have built a simple web messenger using the Go programming language on the backend and Vue.js on the frontend. The primary objective of this project was to enhance my concurrency skills in Go.&lt;/p>
&lt;p>The application allows users to send and receive messages in real-time in a chat room. Each room has a unique URL, and users can join the room by visiting the URL. The application is built using the following technologies:&lt;/p></description></item><item><title>Portfolio Tracker</title><link>https://olzhasar.com/projects/portfolio-tracker/</link><pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate><guid>https://olzhasar.com/projects/portfolio-tracker/</guid><description>&lt;p>&lt;img loading="lazy" src="https://olzhasar.com/portfolio-tracker.png" alt="Preview" />
&lt;/p>
&lt;p>This is a hobby project that I have been working on for a while. It is a simple web application that allows users to keep track of their investments. It only supports equities from the S&amp;amp;P 500 index for the moment. Financial data is regularly updated from the remote API and saved locally.&lt;/p>
&lt;p>Users can manage their portfolio holdings, see performance metrics and view stock price charts.&lt;/p>
&lt;p>Technologies used:&lt;/p></description></item><item><title>SDL Tetris</title><link>https://olzhasar.com/projects/sdl-tetris/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><guid>https://olzhasar.com/projects/sdl-tetris/</guid><description>&lt;p>I have developed a &lt;code>Tetris&lt;/code> clone entirely from scratch using the C programming language. The primary objective of this project was to enhance my C programming skills. To handle the graphics, I made use of the &lt;a href="https://www.libsdl.org/">SDL2&lt;/a> library.&lt;/p>
&lt;p>I&amp;rsquo;ve also ported this game to WebAssembly. You can check out an online demo &lt;a href="https://tetris.olzhasar.com/">available here&lt;/a>.&lt;/p>
&lt;p>To explore the source code of the project, feel free to visit the &lt;a href="https://github.com/olzhasar/sdl-tetris">GitHub repository&lt;/a>.&lt;/p>
&lt;p>Preview of the game:&lt;/p></description></item><item><title>pytest-watcher</title><link>https://olzhasar.com/projects/pytest-watcher/</link><pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate><guid>https://olzhasar.com/projects/pytest-watcher/</guid><description>&lt;p>&lt;strong>&lt;code>pytest-watcher&lt;/code>&lt;/strong> is an open-source tool designed to streamline the pytest workflow by automatically running tests whenever changes are made to *.py files within a project.&lt;/p>
&lt;p>As a strong advocate of the test-driven development approach, I frequently execute tests throughout my regular development cycle, so I&amp;rsquo;ve built this simple tool to avoid manual repetitive test invocations.&lt;/p>
&lt;p>You can find the library on PyPi at the following link:&lt;/p>
&lt;p>&lt;a href="https://pypi.org/project/pytest-watcher/">https://pypi.org/project/pytest-watcher/&lt;/a>&lt;/p>
&lt;p>For the source code, please visit the GitHub repository:&lt;/p></description></item></channel></rss>