<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coding Interview on</title><link>/tags/coding-interview/</link><description>Recent content in Coding Interview on</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 19 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/coding-interview/index.xml" rel="self" type="application/rss+xml"/><item><title>A better way to prepare for your coding interviews</title><link>/posts/a-better-way-to-prepare-for-your-coding-interviews/</link><pubDate>Fri, 19 May 2023 00:00:00 +0000</pubDate><guid>/posts/a-better-way-to-prepare-for-your-coding-interviews/</guid><description>&lt;p>I recently started applying to Big Tech companies, and as a result, I ended up solving a lot of LeetCode problems (284 problems at the time of writing this blog post). During the preparation process, it became clear to me why so many developers argue about the broken state of the tech interviewing process. Solving LeetCode problems takes a significant amount of time and energy that could otherwise be spent on building projects. However, I believe that the main issue lies not with the tech interviews themselves, but rather with the preparation process.&lt;/p></description></item></channel></rss>